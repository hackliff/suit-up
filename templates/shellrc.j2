# --
# -- {{ ansible_managed }}
# --

safe_import () {
  local filename=$1
  [[ -f {{ dna_lib_path }}/${filename} ]] && \
    source {{ dna_lib_path }}/${filename}
}


# -- environment configuration
test -d {{ dna_bin_path }} && export PATH=$PATH:{{ dna_bin_path }}
test -d {{ consul_home }}/bin && export PATH=$PATH:{{ consul_home }}/bin

# -- third party utilities
safe_import k.sh
safe_import z.sh
safe_import autoenv/activate.sh
# NOTE cannot keep it in dna path ?
[[ -s "$HOME/.local/share/marker/marker.sh" ]] && source "$HOME/.local/share/marker/marker"
# FIXME see issue #3
#safe_import shml.sh

# TODO use same approach for languages (install confirmation, ...)
## ---------------------------- virtual environment

## -- pyenv
export PYENV_ROOT={{ dna_lib_path }}/pyenv eval
export PATH=$PATH:$PYENV_ROOT/bin
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
source {{ dna_lib_path }}/pyenv/completions/pyenv.zsh
pyenv global {{ dev.python_version}} || pyenv install {{ dev.python_version }}
echo "init | now using python {{ dev.python_version }}"

## -- rbenv
export PATH="{{ dna_lib_path }}/rbenv/bin:$PATH"
export RBENV_ROOT="{{ dna_lib_path }}/rbenv/"
eval "$(rbenv init -)"
# Check if requested ruby version is installed
if [ -z "$(rbenv versions | grep {{ dev.ruby_version }})" ]; then
  echo -n "Ruby {{ dev.ruby_version }} not found, do you want to install it ? [y/N] "
  read answer
  [[ "${answer}" == "y" ]] && rbenv install {{ dev.ruby_version }}
else
  echo "init | now using ruby {{ dev.ruby_version }}"
  rbenv global {{ dev.ruby_version }}
fi

## -- install and/or activate node
n {{ dev.node_version }}
echo "init | now using node {{ dev.node_version }}"

## -- Docker tips --------------------------------------------------------------

# delete all untagged images.
alias dcleani='printf "\ndeleting untagged images\n\n" && docker rmi $(docker images -q -f dangling=true)'

# Shellscript to delete orphaned docker volumes
# https://github.com/chadoe/docker-cleanup-volumes
alias dcleanv='printf "\ndeleting orphan volumes\n\n" && docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes'

## docker-machine/compose ------------------------------------------------------

dstart() {
  local MACHINE_NAME="${1:-{{ docker_vm_name }}}"
  docker-machine start ${MACHINE_NAME} && eval "$(docker-machine env ${MACHINE_NAME})"
}

dhack () {
  local name=${1:-lab}
  local container="$(basename $PWD)_${name}_1"
  dstart
  docker-compose up -d
  docker exec -it ${container} bash
}

# reset docker-compose fleet
alias dcreset='printf "\ndestroying fleet ...\n" && docker-compose stop && docker-compose rm -v'

## -----------------------------------------------------------------------------

# TODO special alias file
alias vim='/usr/local/bin/vim'
