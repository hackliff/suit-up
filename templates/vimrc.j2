"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
"
" Maintainer:
"   {{ author.name }} - {{ author.mail }}
"
" Version: 
"       0.1.5 - 24/10/2015
"
" Sections:
"   TODO
"
" Provisioning:
"   {{ ansible_managed }}
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" TODOs {
" FIXME System copy-paste messes up indentation and comments
" }

" Load external configuration before anything else
if filereadable(expand("~/.vim/before.vimrc"))
  source ~/.vim/before.vimrc
endif

" Options {
    let g:dna_vim_path = expand("{{ editor.rcpath }}")
    let mapleader="{{ editor.leader }}"  " rempa leader to a key easier to reach
" }

" ================ General Config ====================
set nocompatible
set title                       " change terminal title
set fileformats=unix
set backspace=indent,eol,start  " Allow backspace in insert mode
set copyindent                  " copy the previous indentation on autoindenting
set history=1000                " Store lots of :cmdline history
set undolevels=1000             " use many muchos levels of undo
set autoread                    " Reload files changed outside vim
set showmatch                   " Show matching brackets.
set hidden                      " Hide buffers when they are abandoned
set ttyfast                     " Optimize for fast terminal connections
set lazyredraw                  " redraw only when we need to."
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a                   " Enable mouse usage (all modes)
endif

" Uncomment the following to have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ================ Search Settings  =================
set gdefault                    " Add the g flag to search/replace by default
set incsearch                   " Find the next match as we type the search
set hlsearch                    " Hilight searches by default
set viminfo='100,f1             " Save up to 100 marks, enable capital marks
set smartcase                   " Do smart case matching
nmap <silent> // :nohlsearch<cr>
"map <space> /
map <c-space> ?
set magic                       " For regular expressions turn magic on

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" ================ Persistent Undo ==================
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================
set autoindent
set smartindent
set smarttab
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth={{ editor.tab }}
set softtabstop={{ editor.tab }}  " number of visual spaces per TAB"
set tabstop={{ editor.tab }}  " number of spaces in tab when editing
set expandtab   " tabs as spaces

set nowrap       "Don't wrap lines
" jump to the next row in the editor (much more natural)
nnoremap j gj
nnoremap k gk

" ================ Folds ============================
set foldenable              " enable folding
set foldmethod=indent       " fold based on indent
set foldlevelstart=3        " fold starting to 3
set foldnestmax=5           " deepest fold is 5 levels
set foldcolumn=1

" ================ Completion =======================
set wildmode=list:longest
set wildmenu                " visual autocomplete for command menu"
set wildignore+=*vim/backups*
" Ignore typical uninteresting project directories
set wildignore+=vendor/**,log/**,tmp/**
" Ignore medias
set wildignore+=*.png,*.jpg,*.gif
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem,*.pyc,*.class
" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache set
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*
" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*
" Disable temp and backup files
set wildignore+=*.swp,*~,._*,*DS_Store*,*.bak

" ================ Scrolling ========================
set scrolloff=8             " Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=5

" 'A' plugin, toggle between .h and .c files
nmap <leader>h <Esc>:A<CR>

" ================= Moving stuff ======================
"Stuff from items.sjbach.com/319/configuring-vim-right
nnoremap <C-e> 4<C-e>
nnoremap <C-y> 4<C-y>

" Left/Right arrow keys change buffers in all modes but insertion
noremap <Left> <Esc>:bp<CR>
nnoremap <Left> <Esc>:bp<CR>
vnoremap <Left> <Esc>:bp<CR>

noremap <Right> <Esc>:bn<CR>
nnoremap <Right> <Esc>:bn<CR>
vnoremap <Right> <Esc>:bn<CR>

" Up/Down arrow keys change windows in all modes but insertion
noremap <Up> <C-w>k
nnoremap <Up> <C-w>k
vnoremap <Up> <C-w>k

noremap <Down> <C-w>j
nnoremap <Down> <C-w>j
vnoremap <Down> <C-w>j

" ====================== Misc ========================

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

nnoremap B ^              " move to the beginning of line
nnoremap E $              " move to the end of line

nmap <leader>w :w!<cr>    " Fast saving
" a trick by Steve Losh for when you forgot to sudo before editing a file that
" requires root privileges
cmap w!! w !sudo tee % >/dev/null

" maps the ,ev and ,sv keys to edit/reload .vimrc. (I got this from Derek
" Wyattâ€™s .vimrc file)
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>e :e
nnoremap <Leader>8 :set tw=80<CR>
nnoremap <Leader>0 :set tw=0<CR>
nnoremap <Leader>n :set invnumber<CR>
nnoremap <leader>N :new<CR>     " Opens a new file

"Dict file completion
set complete+=k
" TODO default location ? template language ?
set dictionary+=/usr/share/vim/vim73/spell/fr.utf-8.spl
" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Switch CWD to the directory of the open buffer:
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Copy from clipboard
"FIXME Error with getrep
vmap <C-c> y: call system("xclip -i -selection clipboard", getreg("\" ))<CR>
nmap <C-v> :call setreg("\"",system("xclip -o -selection clipboard"))<CR>p

" Load external configuration after anything else
if filereadable(expand("~/.vim/after.vimrc"))
  source ~/.vim/after.vimrc
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" Partials: load partial configurations
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function SafeLoad(filepath)
    let sourcePath = expand(g:dna_vim_path . a:filepath)
    if filereadable(sourcePath)
        execute 'source' . sourcePath
    endif
endfunction

call SafeLoad("/plugins/bundles.vim")
call SafeLoad("/plugins/mappings.vim")
call SafeLoad("/plugins/filetypes.vim")
call SafeLoad("/plugins/ux.vim")
call SafeLoad("/plugins/settings/complete.vim")
call SafeLoad("/plugins/settings/misc.vim")
if executable("ag")
  if filereadable(g:dna_vim_path . "/plugged/ag.vim")
    call SafeLoad("/plugins/settings/ag.vim")
  endif
endif
