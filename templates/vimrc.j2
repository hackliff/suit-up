" ===================== Header ======================
" FIXME System copy-paste messes up indentation and comments
set nocompatible
set enc=utf-8

" Load external configuration before anything else
if filereadable(expand("~/.vim/before.vimrc"))
  source ~/.vim/before.vimrc
endif

" rempa leader to a key easier to reach
let mapleader="{{ editor.leader }}"
imap ii <Esc>
nnoremap ; :

" ============= Vim-Plug Initialization =============
if filereadable(expand("~/.vim/plugins/bundles.vim"))
    source ~/.vim/plugins/bundles.vim
endif

" ================ General Config ====================
set title                       " change terminal title
set fileformats=unix
set backspace=indent,eol,start  " Allow backspace in insert mode
set copyindent                  " copy the previous indentation on autoindenting
set history=1000                " Store lots of :cmdline history
set undolevels=1000             " use many muchos levels of undo
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set autoread                    " Reload files changed outside vim
set showmatch                   " Show matching brackets.
set hidden                      " Hide buffers when they are abandoned
set mouse=a                     " Enable mouse usage (all modes)
set ttyfast                     " Optimize for fast terminal connections
set gdefault                    " Add the g flag to search/replace by default
set encoding=utf-8 nobomb       " Use UTF-8 without BOM
set lcs=tab:▸\ ,trail:·,extends:#,nbsp:_  " Show “invisible” characters
set list
set cursorline                  " highlight current line"
set lazyredraw          " redraw only when we need to."

" Uncomment the following to have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ================ Search Settings  =================
set incsearch                   " Find the next match as we type the search
set hlsearch                    " Hilight searches by default
set viminfo='100,f1             " Save up to 100 marks, enable capital marks
set smartcase		            " Do smart case matching
nmap <silent> // :nohlsearch<cr>
"map <space> /
map <c-space> ?

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" ================ Persistent Undo ==================
silent !mkdir ~/.vim/backups > /dev/null 2>&1
set undodir=~/.vim/backups
set undofile

" ================ Indentation ======================
set autoindent
set smartindent
set smarttab
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth={{ editor.tab }}
set softtabstop={{ editor.tab }}  " number of visual spaces per TAB"
set tabstop={{ editor.tab }}  " number of spaces in tab when editing
set expandtab   " tabs as spaces

if has("syntax")
  syntax enable           " enable syntax processing"
  " NOTE What's the difference with 'syntax on' ?
endif
if has("autocmd")
  filetype plugin on
  filetype indent on  " load filetype-specific indent files"
endif

set nowrap       "Don't wrap lines
" jump to the next row in the editor (much more natural)
nnoremap j gj
nnoremap k gk

" ================ Folds ============================
set foldmethod=indent       " Fold based on indent
set foldnestmax=3           " Deepest fold is 3 levels
set foldcolumn=1

" ================ Completion =======================
set wildmode=list:longest
set wildmenu                " visual autocomplete for command menu"
set wildignore=*.o,*.obj,*~ " Stuff to ignore when tab completing
set wildignore+=*.swp,*.bak,*.class,*.pyc
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Scrolling ========================
set scrolloff=8             " Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=5

" 'A' plugin, toggle between .h and .c files
nmap <leader>h <Esc>:A<CR>

" ================= Moving stuff ======================
"Stuff from items.sjbach.com/319/configuring-vim-right
nnoremap <C-e> 4<C-e>
nnoremap <C-y> 4<C-y>

" Left/Right arrow keys change buffers in all modes but insertion
noremap <Left> <Esc>:bp<CR>
nnoremap <Left> <Esc>:bp<CR>
vnoremap <Left> <Esc>:bp<CR>

noremap <Right> <Esc>:bn<CR>
nnoremap <Right> <Esc>:bn<CR>
vnoremap <Right> <Esc>:bn<CR>

" Up/Down arrow keys change windows in all modes but insertion
noremap <Up> <C-w>k
nnoremap <Up> <C-w>k
vnoremap <Up> <C-w>k

noremap <Down> <C-w>j
nnoremap <Down> <C-w>j
vnoremap <Down> <C-w>j

" ====================== Misc ========================

" a trick by Steve Losh for when you forgot to sudo before editing a file that
" requires root privileges
cmap w!! w !sudo tee % >/dev/null
" maps the ,ev and ,sv keys to edit/reload .vimrc. (I got this from Derek
" Wyatt’s .vimrc file)
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>e :e
nnoremap <Leader>8 :set tw=80<CR>
nnoremap <Leader>0 :set tw=0<CR>
nnoremap <Leader>n :set invnumber<CR>
nnoremap <leader>N :new<CR>     " Opens a new file

"Dict file completion
set complete+=k
" TODO default location ? template language ?
set dictionary+=/usr/share/vim/vim73/spell/fr.utf-8.spl
" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Switch CWD to the directory of the open buffer:
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Copy from clipboard
"FIXME Error with getrep
vmap <C-c> y: call system("xclip -i -selection clipboard", getreg("\" ))<CR>
nmap <C-v> :call setreg("\"",system("xclip -o -selection clipboard"))<CR>p

" =================== Status line ====================
" Make the command line two lines high and change the statusline display to
" something that looks useful.
function! CWD()
    let curdir = substitute(getcwd(), '/home/xavier', "~", "g")
    return curdir
endfunction

set cmdheight=1
" FIXME Move to external settings set statusline=[%l,%v\ %P%M][Cwd\ %{CWD()}][File\ %f]\ %r%h%w\ %#warningmsg#%{SyntasticStatuslineFlag()}%*
" FIXME Move to external settings : set statusline+=%{fugitive#statusline()}\ (%{&ff})

" define :HighlightLongLines command to highlight the offending parts of
" lines that are longer than the specified length (defaulting to 80)
command! -nargs=? HighlightLongLines call s:HighlightLongLines('<args>')
function! s:HighlightLongLines(width)
    let targetWidth = a:width != '' ? a:width : 79
    if targetWidth > 0
        exec 'match Todo /\%>' . (targetWidth) . 'v/'
    else
        echomsg "Usage: HighlightLongLines [natural number]"
    endif
endfunction

" Load external configuration after anything else
if filereadable(expand("~/.vim/after.vimrc"))
  source ~/.vim/after.vimrc
endif

" TEMPORARY - to be moved on specific settings
" FIXME make vim install to block : colorscheme solarized
set background=dark
function! ToggleBG()
  let s:tbg = &background
  " inversion
  if s:tbg == "dark"
    set background=light
  else
    set background=dark
  endif
endfunction
noremap <leader>bg :call ToggleBG()<CR>
" TEMPORARY ----------------------------------
